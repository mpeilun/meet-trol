generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime @db.Date
  updatedAt    DateTime @db.Date
  email        String
  googleId     String
  name         String
  myClasses    Classe   @relation("student", fields: [myClassesId], references: [id])
  myClassesId  String[] @db.ObjectId
  ownClasses   Classe   @relation("teacher", fields: [myClassesId], references: [id])
  ownClassesId String[] @db.ObjectId
}

model Classe {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String    @unique
  description String?
  students    User[]    @relation("student")
  owners      User[]    @relation("teacher")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  chapters    Chapter[]
}

model Chapter {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  videos    Video[]
  classes   Classe  @relation(fields: [classesId], references: [id])
  classesId String  @db.ObjectId
}

model Video {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  title     String
  info      Info[]
  choice    Choice[]
  rank      Rank[]
  fill      Fill[]
  drag      Drag[]
  chapter   Chapter  @relation(fields: [chapterId], references: [id])
  chapterId String   @db.ObjectId
}

model Info {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  title   String
  content String?
  url     String?
  start   String
  end     String
  video   Video   @relation(fields: [videoId], references: [id])
  videoId String  @db.ObjectId
}

model YourAnswer {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  studentId      String  @db.ObjectId
  answerChoice   Choice? @relation(fields: [answerChoiceId], references: [id])
  answerChoiceId String? @db.ObjectId
  answerRank     Rank?   @relation(fields: [answerRankId], references: [id])
  answerRankId   String? @db.ObjectId
  answerFill     Fill?   @relation(fields: [answerFillId], references: [id])
  answerFillId   String? @db.ObjectId
  answerDrag     Drag?   @relation(fields: [answerDragId], references: [id])
  answerDragId   String? @db.ObjectId
}

model Choice {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  option     String[]
  answer     Int[]
  yourAnswer YourAnswer[]
  start      String
  end        String
  ivideo     Video        @relation(fields: [videoId], references: [id])
  videoId    String       @db.ObjectId
}

model Rank {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  content    String?
  option     String[]
  answer     String[]
  yourAnswer YourAnswer[]
  start      String
  end        String
  video      Video        @relation(fields: [videoId], references: [id])
  videoId    String       @db.ObjectId
}

model Fill {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  content    String?
  option     String[]
  answer     String[]
  yourAnswer YourAnswer[]
  start      String
  end        String
  video      Video        @relation(fields: [videoId], references: [id])
  videoId    String       @db.ObjectId
}

model Drag {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  content    String?
  url        String?
  answer     String[]
  yourAnswer YourAnswer[]
  start      String
  end        String
  video      Video        @relation(fields: [videoId], references: [id])
  videoId    String       @db.ObjectId
}

// type ClassesEvent {
//   id          String                    @map("_id") @db.ObjectId
//   active      Boolean
//   endTime     DateTime                  @db.Date
//   participant ClassesEventParticipant[]
//   question    String[]                  @db.ObjectId
//   startTime   DateTime?                 @db.Date
//   title       String
// }

// type ClassesEventParticipant {
//   id       String   @map("_id") @db.ObjectId
//   joinTime DateTime @db.Date
//   userId   String   @db.ObjectId
// }

// type OrderansItems {
//   id    String @map("_id") @db.ObjectId
//   title String
// }

// type OrdersItems {
//   id    String @map("_id") @db.ObjectId
//   title String
// }

// type QuestionsFeedback {
//   anser  QuestionsFeedbackAnser?
//   answer String[]
//   userId String                  @db.ObjectId
// }

// type QuestionsFeedbackAnser {
//   score Int
//   title String
// }

// type QuestionsOption {
//   id      String   @map("_id") @db.ObjectId
//   correct Boolean?
//   title   String
// }

// type QuestionsTimmer {
//   enable Boolean
//   time   Int
// }

// model orderans {
//   id         String          @id @default(auto()) @map("_id") @db.ObjectId
//   v          Int             @map("__v")
//   items      OrderansItems[]
//   qTitle     String
//   questionId String
//   studentId  String
// }

// model orders {
//   id            String        @id @default(auto()) @map("_id") @db.ObjectId
//   v             Int           @map("__v")
//   items         OrdersItems[]
//   questionTitle String
// }

// model questions {
//   id           String            @id @default(auto()) @map("_id") @db.ObjectId
//   Question     String
//   v            Int               @map("__v")
//   active       Boolean?
//   canEdit      Boolean?
//   canSeeResult Boolean?
//   createdAt    DateTime          @db.Date
//   /// Multiple data types found: Json: 33.3%, Array(QuestionsFeedback): 66.7% out of 46 sampled entries
//   feedback     Json?
//   option       QuestionsOption[]
//   timmer       QuestionsTimmer?
//   title        String?
//   type         String
//   updatedAt    DateTime          @db.Date
// }

// model rankings {
//   id       String @id @default(auto()) @map("_id") @db.ObjectId
//   /// Could not determine type: the field only had null or empty values in the sample set.
//   feedback Json?
// }

// model ratings {
//   id String @id @default(auto()) @map("_id") @db.ObjectId
// }

// model users {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   v         Int      @map("__v")
//   /// Could not determine type: the field only had null or empty values in the sample set.
//   class     Json?
//   createdAt DateTime @db.Date
//   email     String
//   googleId  String
//   name      String
//   updatedAt DateTime @db.Date
// }
