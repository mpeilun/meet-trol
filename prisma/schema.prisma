generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  myClasses     String[]
  ownClasses    String[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Course {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String    @unique
  description String?
  students    String[]  @db.ObjectId
  owners      String[]  @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  chapters    Chapter[]
}

model Chapter {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  title    String
  videos   Video[]
  course   Course  @relation(fields: [courseId], references: [id])
  courseId String  @db.ObjectId
}

model Video {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  url         String
  title       String
  description String?
  material    String?
  info        Info[]
  choice      Choice[]
  rank        Rank[]
  fill        Fill[]
  drag        Drag[]
  chapter     Chapter  @relation(fields: [chapterId], references: [id])
  chapterId   String   @db.ObjectId
}

model Info {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  content    String?
  url        String?
  start      String
  end        String
  firstJumps Boolean
  video      Video   @relation(fields: [videoId], references: [id])
  videoId    String  @db.ObjectId
}

type Answers {
  answers   Int[]
  studentId String
}

model Choice {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  quesiton     String
  option       String[]
  answer       Int[]
  yourAnswer   Answers[] // 第一層List放回答次數，第二次放答案index index有兩個以上則為複選
  start        String
  end          String
  isReapeatted Boolean
  firstJumps   Boolean
  video        Video     @relation(fields: [videoId], references: [id])
  videoId      String    @db.ObjectId
}

model Rank {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  question   String
  option     String[]
  answer     String[]
  yourAnswer Answers[] // 第一層List放回答次數，第二次放答案index順序
  start      String
  end        String
  video      Video     @relation(fields: [videoId], references: [id])
  videoId    String    @db.ObjectId
}

model Fill {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  question   String
  option     String[]
  answer     String[]
  yourAnswer Answers[]
  start      String
  end        String
  video      Video     @relation(fields: [videoId], references: [id])
  videoId    String    @db.ObjectId
}

model Drag {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  content    String?
  url        String?
  answer     String[]
  yourAnswer Answers[]
  start      String
  end        String
  video      Video     @relation(fields: [videoId], references: [id])
  videoId    String    @db.ObjectId
}

// type ClassesEvent {
//   id          String                    @map("_id") @db.ObjectId
//   active      Boolean
//   endTime     DateTime                  @db.Date
//   participant ClassesEventParticipant[]
//   question    String[]                  @db.ObjectId
//   startTime   DateTime?                 @db.Date
//   title       String
// }

// type ClassesEventParticipant {
//   id       String   @map("_id") @db.ObjectId
//   joinTime DateTime @db.Date
//   userId   String   @db.ObjectId
// }

// type OrderansItems {
//   id    String @map("_id") @db.ObjectId
//   title String
// }

// type OrdersItems {
//   id    String @map("_id") @db.ObjectId
//   title String
// }

// type QuestionsFeedback {
//   anser  QuestionsFeedbackAnser?
//   answer String[]
//   userId String                  @db.ObjectId
// }

// type QuestionsFeedbackAnser {
//   score Int
//   title String
// }

// type QuestionsOption {
//   id      String   @map("_id") @db.ObjectId
//   correct Boolean?
//   title   String
// }

// type QuestionsTimmer {
//   enable Boolean
//   time   Int
// }

// model orderans {
//   id         String          @id @default(auto()) @map("_id") @db.ObjectId
//   v          Int             @map("__v")
//   items      OrderansItems[]
//   qTitle     String
//   questionId String
//   studentId  String
// }

// model orders {
//   id            String        @id @default(auto()) @map("_id") @db.ObjectId
//   v             Int           @map("__v")
//   items         OrdersItems[]
//   questionTitle String
// }

// model questions {
//   id           String            @id @default(auto()) @map("_id") @db.ObjectId
//   Question     String
//   v            Int               @map("__v")
//   active       Boolean?
//   canEdit      Boolean?
//   canSeeResult Boolean?
//   createdAt    DateTime          @db.Date
//   /// Multiple data types found: Json: 33.3%, Array(QuestionsFeedback): 66.7% out of 46 sampled entries
//   feedback     Json?
//   option       QuestionsOption[]
//   timmer       QuestionsTimmer?
//   title        String?
//   type         String
//   updatedAt    DateTime          @db.Date
// }

// model rankings {
//   id       String @id @default(auto()) @map("_id") @db.ObjectId
//   /// Could not determine type: the field only had null or empty values in the sample set.
//   feedback Json?
// }

// model ratings {
//   id String @id @default(auto()) @map("_id") @db.ObjectId
// }

// model users {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   v         Int      @map("__v")
//   /// Could not determine type: the field only had null or empty values in the sample set.
//   class     Json?
//   createdAt DateTime @db.Date
//   email     String
//   googleId  String
//   name      String
//   updatedAt DateTime @db.Date
// }
