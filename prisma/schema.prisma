generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  records       Record[]
  accounts      Account[]
  sessions      Session[]
  courses       Course[]  @relation("meber", fields: [coursesId], references: [id])
  coursesId     String[]  @db.ObjectId
}

model Record {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  courseId String     @db.ObjectId
  lastView LastView[]
  user     User       @relation(fields: [userId], references: [id])
  userId   String     @db.ObjectId
}

model LastView {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  videoId   String   @db.ObjectId
  videoTime Float
  viewTime  DateTime @default(now())
  record    Record   @relation(fields: [recordId], references: [id])
  recordId  String   @db.ObjectId
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Course {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String    @unique
  description String?
  start       DateTime?
  end         DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  chapters    Chapter[]
  members     User[]    @relation("meber", fields: [membersId], references: [id])
  membersId   String[]  @db.ObjectId
  ownerId     String[]  @db.ObjectId
}

model Chapter {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  title    String
  videos   Video[]
  course   Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String  @db.ObjectId
}

model Video {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  url         String
  title       String
  description String?
  material    String?
  info        Info[]
  choice      Choice[]
  rank        Rank[]
  fill        Fill[]
  drag        Drag[]
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId   String   @db.ObjectId
}

model Info {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  questionType String
  title        String?
  content      String?
  url          String?
  start        Float
  end          Float
  video        Video   @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId      String  @db.ObjectId
}

type ChoiceOption {
  option   String
  isAnswer Boolean
}

model Choice {
  id           String           @id @default(auto()) @map("_id") @db.ObjectId
  questionType String
  title        String?
  question     String?
  isShowAnswer Boolean
  note         String?
  options      ChoiceOption[]
  feedback     ChoiceFeedback[] // 第一層List放回答次數，第二層放答案index index有兩個以上則為複選
  start        Float
  end          Float
  video        Video            @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId      String           @db.ObjectId
}

model ChoiceFeedback {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  answers  Int[]
  userId   String @db.ObjectId
  choice   Choice @relation(fields: [choiceId], references: [id], onDelete: Cascade)
  choiceId String @db.ObjectId
}

model Rank {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  questionType String
  title        String?
  question     String?
  isShowAnswer Boolean
  note         String?
  options      String[]
  feedback     RankFeedback[] // 第一層List放回答次數，第二層放答案順序
  start        Float
  end          Float
  video        Video          @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId      String         @db.ObjectId
}

model RankFeedback {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  answers String[]
  userId  String   @db.ObjectId
  rank    Rank     @relation(fields: [rankId], references: [id], onDelete: Cascade)
  rankId  String   @db.ObjectId
}

model Fill {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  questionType String
  title        String?
  question     String?
  isShowAnswer Boolean
  note         String?
  options      String[]
  feedback     FillFeedback[]
  start        Float
  end          Float
  video        Video          @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId      String         @db.ObjectId
}

model FillFeedback {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  answers String[]
  userId  String   @db.ObjectId
  fill    Fill     @relation(fields: [fillId], references: [id], onDelete: Cascade)
  fillId  String   @db.ObjectId
}

type Position {
  x      Int
  y      Int
  width  Int?
  height Int?
}

model Drag {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  questionType String
  title        String?
  question     String?
  url          String?
  isShowAnswer Boolean
  answerCount  Int
  note         String?
  options      Position[]
  feedback     DragFeedback[]
  start        Float
  end          Float
  video        Video          @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId      String         @db.ObjectId
}

model DragFeedback {
  id      String     @id @default(auto()) @map("_id") @db.ObjectId
  answers Position[]
  userId  String     @db.ObjectId
  drag    Drag       @relation(fields: [dragId], references: [id], onDelete: Cascade)
  dragId  String     @db.ObjectId
}
